/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha1

// SessionInfoApplyConfiguration represents a declarative configuration of the SessionInfo type for use
// with apply.
type SessionInfoApplyConfiguration struct {
	AESKey             *string `json:"aesKey,omitempty"`
	AESIV              *string `json:"aesIV,omitempty"`
	VideoWidth         *int    `json:"videoWidth,omitempty"`
	VideoHeight        *int    `json:"videoHeight,omitempty"`
	VideoRefreshRate   *int    `json:"videoRefreshRate,omitempty"`
	SurroundAudioFlags *int    `json:"surroundAudioFlags,omitempty"`
	RTSPFakeIP         *string `json:"rtspFakeIP,omitempty"`
}

// SessionInfoApplyConfiguration constructs a declarative configuration of the SessionInfo type for use with
// apply.
func SessionInfo() *SessionInfoApplyConfiguration {
	return &SessionInfoApplyConfiguration{}
}

// WithAESKey sets the AESKey field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the AESKey field is set to the value of the last call.
func (b *SessionInfoApplyConfiguration) WithAESKey(value string) *SessionInfoApplyConfiguration {
	b.AESKey = &value
	return b
}

// WithAESIV sets the AESIV field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the AESIV field is set to the value of the last call.
func (b *SessionInfoApplyConfiguration) WithAESIV(value string) *SessionInfoApplyConfiguration {
	b.AESIV = &value
	return b
}

// WithVideoWidth sets the VideoWidth field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the VideoWidth field is set to the value of the last call.
func (b *SessionInfoApplyConfiguration) WithVideoWidth(value int) *SessionInfoApplyConfiguration {
	b.VideoWidth = &value
	return b
}

// WithVideoHeight sets the VideoHeight field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the VideoHeight field is set to the value of the last call.
func (b *SessionInfoApplyConfiguration) WithVideoHeight(value int) *SessionInfoApplyConfiguration {
	b.VideoHeight = &value
	return b
}

// WithVideoRefreshRate sets the VideoRefreshRate field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the VideoRefreshRate field is set to the value of the last call.
func (b *SessionInfoApplyConfiguration) WithVideoRefreshRate(value int) *SessionInfoApplyConfiguration {
	b.VideoRefreshRate = &value
	return b
}

// WithSurroundAudioFlags sets the SurroundAudioFlags field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the SurroundAudioFlags field is set to the value of the last call.
func (b *SessionInfoApplyConfiguration) WithSurroundAudioFlags(value int) *SessionInfoApplyConfiguration {
	b.SurroundAudioFlags = &value
	return b
}

// WithRTSPFakeIP sets the RTSPFakeIP field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the RTSPFakeIP field is set to the value of the last call.
func (b *SessionInfoApplyConfiguration) WithRTSPFakeIP(value string) *SessionInfoApplyConfiguration {
	b.RTSPFakeIP = &value
	return b
}
